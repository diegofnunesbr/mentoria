apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.Deployment.name }}
spec:
  replicas: {{ .Values.Deployment.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.Deployment.app }}
  template:
    metadata:
      labels:
        app: {{ .Values.Deployment.app }}
    spec:
      serviceAccountName: {{ .Values.Deployment.serviceAccountName }}
      securityContext:
            fsGroup: 1000 
            runAsUser: 1000
      containers:
        - name: {{ .Values.Deployment.app }}
          image: {{ .Values.Deployment.image }}
          resources:
            limits:
              memory: "2Gi"
              cpu: "1000m"
            requests:
              memory: "500Mi"
              cpu: "500m"
          ports:
            - name: httpport
              containerPort: 8080
            - name: jnlpport
              containerPort: 50000
          livenessProbe:
            httpGet:
              path: "/login"
              port: 8080
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: "/login"
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - name: jenkins-data
              mountPath: /var/jenkins_home         
      volumes:
        - name: jenkins-data
          persistentVolumeClaim:
              claimName: jenkins-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.Service.name }}
  annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/path:   /
      prometheus.io/port:   '8080'
spec:
  selector: 
    app: {{ .Values.Service.app }}
  type: NodePort  
  ports:
    - name: httpport
      port: 8080
      targetPort: 8080
      nodePort: {{ .Values.Service.nodePort }}
    - name: jnlpport
      port: 50000
      targetPort: 50000
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.PersistentVolumeClaim.name }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.PersistentVolumeClaim.storage }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.ServiceAccount.name }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ .Values.Role.name }}
  labels:
    "app.kubernetes.io/name": 'jenkins'
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get","list","watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .Values.RoleBinding.name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins
subjects:
- kind: ServiceAccount
  name: jenkins-admin
